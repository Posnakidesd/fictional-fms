/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.trg.fms.api;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = com.trg.fms.serdes.JsonTripDeserializer.class)
@com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.trg.fms.serdes.JsonTripSerializer.class)
@org.apache.avro.specific.AvroGenerated
public class Trip extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7158449892834931691L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trip\",\"namespace\":\"com.trg.fms.api\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"javaAnnotation\":\"org.springframework.data.annotation.Id\"},{\"name\":\"driverId\",\"type\":[\"null\",\"long\"],\"order\":\"ignore\"},{\"name\":\"carId\",\"type\":[\"null\",\"long\"],\"order\":\"ignore\"},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"TripState\",\"symbols\":[\"START\",\"ACTIVE\",\"STOP\"]},\"order\":\"ignore\"}],\"javaAnnotation\":\"com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = com.trg.fms.serdes.JsonTripDeserializer.class)\\n@com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.trg.fms.serdes.JsonTripSerializer.class)\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Trip> ENCODER =
      new BinaryMessageEncoder<Trip>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trip> DECODER =
      new BinaryMessageDecoder<Trip>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Trip> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Trip> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Trip> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Trip>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Trip to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Trip from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Trip instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Trip fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @org.springframework.data.annotation.Id
   private java.lang.Long id;
   private java.lang.Long driverId;
   private java.lang.Long carId;
   private com.trg.fms.api.TripState state;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trip() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param driverId The new value for driverId
   * @param carId The new value for carId
   * @param state The new value for state
   */
  public Trip(java.lang.Long id, java.lang.Long driverId, java.lang.Long carId, com.trg.fms.api.TripState state) {
    this.id = id;
    this.driverId = driverId;
    this.carId = carId;
    this.state = state;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return driverId;
    case 2: return carId;
    case 3: return state;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: driverId = (java.lang.Long)value$; break;
    case 2: carId = (java.lang.Long)value$; break;
    case 3: state = (com.trg.fms.api.TripState)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'driverId' field.
   * @return The value of the 'driverId' field.
   */
  public java.lang.Long getDriverId() {
    return driverId;
  }


  /**
   * Sets the value of the 'driverId' field.
   * @param value the value to set.
   */
  public void setDriverId(java.lang.Long value) {
    this.driverId = value;
  }

  /**
   * Gets the value of the 'carId' field.
   * @return The value of the 'carId' field.
   */
  public java.lang.Long getCarId() {
    return carId;
  }


  /**
   * Sets the value of the 'carId' field.
   * @param value the value to set.
   */
  public void setCarId(java.lang.Long value) {
    this.carId = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public com.trg.fms.api.TripState getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(com.trg.fms.api.TripState value) {
    this.state = value;
  }

  /**
   * Creates a new Trip RecordBuilder.
   * @return A new Trip RecordBuilder
   */
  public static com.trg.fms.api.Trip.Builder newBuilder() {
    return new com.trg.fms.api.Trip.Builder();
  }

  /**
   * Creates a new Trip RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trip RecordBuilder
   */
  public static com.trg.fms.api.Trip.Builder newBuilder(com.trg.fms.api.Trip.Builder other) {
    if (other == null) {
      return new com.trg.fms.api.Trip.Builder();
    } else {
      return new com.trg.fms.api.Trip.Builder(other);
    }
  }

  /**
   * Creates a new Trip RecordBuilder by copying an existing Trip instance.
   * @param other The existing instance to copy.
   * @return A new Trip RecordBuilder
   */
  public static com.trg.fms.api.Trip.Builder newBuilder(com.trg.fms.api.Trip other) {
    if (other == null) {
      return new com.trg.fms.api.Trip.Builder();
    } else {
      return new com.trg.fms.api.Trip.Builder(other);
    }
  }

  /**
   * RecordBuilder for Trip instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trip>
    implements org.apache.avro.data.RecordBuilder<Trip> {

    private java.lang.Long id;
    private java.lang.Long driverId;
    private java.lang.Long carId;
    private com.trg.fms.api.TripState state;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.trg.fms.api.Trip.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.driverId)) {
        this.driverId = data().deepCopy(fields()[1].schema(), other.driverId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.carId)) {
        this.carId = data().deepCopy(fields()[2].schema(), other.carId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Trip instance
     * @param other The existing instance to copy.
     */
    private Builder(com.trg.fms.api.Trip other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.driverId)) {
        this.driverId = data().deepCopy(fields()[1].schema(), other.driverId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.carId)) {
        this.carId = data().deepCopy(fields()[2].schema(), other.carId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.trg.fms.api.Trip.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.trg.fms.api.Trip.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'driverId' field.
      * @return The value.
      */
    public java.lang.Long getDriverId() {
      return driverId;
    }


    /**
      * Sets the value of the 'driverId' field.
      * @param value The value of 'driverId'.
      * @return This builder.
      */
    public com.trg.fms.api.Trip.Builder setDriverId(java.lang.Long value) {
      validate(fields()[1], value);
      this.driverId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'driverId' field has been set.
      * @return True if the 'driverId' field has been set, false otherwise.
      */
    public boolean hasDriverId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'driverId' field.
      * @return This builder.
      */
    public com.trg.fms.api.Trip.Builder clearDriverId() {
      driverId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'carId' field.
      * @return The value.
      */
    public java.lang.Long getCarId() {
      return carId;
    }


    /**
      * Sets the value of the 'carId' field.
      * @param value The value of 'carId'.
      * @return This builder.
      */
    public com.trg.fms.api.Trip.Builder setCarId(java.lang.Long value) {
      validate(fields()[2], value);
      this.carId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'carId' field has been set.
      * @return True if the 'carId' field has been set, false otherwise.
      */
    public boolean hasCarId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'carId' field.
      * @return This builder.
      */
    public com.trg.fms.api.Trip.Builder clearCarId() {
      carId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public com.trg.fms.api.TripState getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.trg.fms.api.Trip.Builder setState(com.trg.fms.api.TripState value) {
      validate(fields()[3], value);
      this.state = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.trg.fms.api.Trip.Builder clearState() {
      state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trip build() {
      try {
        Trip record = new Trip();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.driverId = fieldSetFlags()[1] ? this.driverId : (java.lang.Long) defaultValue(fields()[1]);
        record.carId = fieldSetFlags()[2] ? this.carId : (java.lang.Long) defaultValue(fields()[2]);
        record.state = fieldSetFlags()[3] ? this.state : (com.trg.fms.api.TripState) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trip>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trip>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trip>
    READER$ = (org.apache.avro.io.DatumReader<Trip>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.id);
    }

    if (this.driverId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.driverId);
    }

    if (this.carId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.carId);
    }

    out.writeEnum(this.state.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.driverId = null;
      } else {
        this.driverId = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.carId = null;
      } else {
        this.carId = in.readLong();
      }

      this.state = com.trg.fms.api.TripState.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.driverId = null;
          } else {
            this.driverId = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.carId = null;
          } else {
            this.carId = in.readLong();
          }
          break;

        case 3:
          this.state = com.trg.fms.api.TripState.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










